services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    restart: always
    ports:
      - ${PORT}:${PORT}
    environment:
      APP_ENV: ${APP_ENV}
      PORT: ${PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_SCHEMA: ${POSTGRES_SCHEMA}
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tsundoku
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    restart: always
    depends_on:
      - app
    ports:
      - 5173:5173
    networks:
      - tsundoku
  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - psql_volume_bp:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DATABASE}'",
        ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - tsundoku

volumes:
  psql_volume_bp:
networks:
  tsundoku:
